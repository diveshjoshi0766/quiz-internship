{"version":3,"sources":["constants/actionTypes.js","components/Questions.js","components/Result.js","components/Quiz.js","App.js","registerServiceWorker.js","middleware.js","reducers/quiz.js","reducer.js","store.js","index.js"],"names":["ActionTypes","Questions","question","option","quiz","JSON","parse","stringify","this","props","q","questions","find","x","id","questionTypeId","options","forEach","selected","onAnswer","slice","pager","index","size","className","name","map","count","htmlFor","checked","type","onChange","config","allowBack","onClick","move","Component","connect","state","mode","dispatch","payload","Result","isCorrect","every","isAnswer","disabled","Quiz","e","target","parseInt","onPagerUpdate","setMode","onSubmit","renderMode","App","quizId","setState","value","load","url","fetch","then","res","json","o","Object","assign","length","onQuizLoad","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","promiseMiddleware","store","next","action","initialQuiz","combineReducers","createStore","reducer","composeWithDevTools","applyMiddleware","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.c56f1746.chunk.js","sourcesContent":["\nexport const ActionTypes = {\n    QuizLoad: 'QuizLoad',\n    QuizAnswer: 'QuizAnswer',\n    QuizSubmit: 'QuizSubmit',\n    PagerUpdate: 'PagerUpdate'\n}","import React, { Component } from 'react';\nimport { ActionTypes } from '../constants/actionTypes';\nimport { connect } from 'react-redux';\n\nconst mapStateToProps = state => ({ ...state.quiz, ...state.mode, ...state.pager });\n\nconst mapDispatchToProps = dispatch => ({\n    onAnswer: payload => dispatch({ type: ActionTypes.QuizAnswer, payload })\n});\n\nclass Questions extends Component {\n\n    onAnswer(question, option) {\n        let quiz = JSON.parse(JSON.stringify(this.props.quiz));\n        let q = quiz.questions.find(x => x.id === question.id);\n        if (q.questionTypeId === 1) {\n            q.options.forEach((x) => { x.selected = false; });\n        }\n        q.options.find(x => x.id === option.id).selected = true;\n        this.props.onAnswer(quiz);\n    }\n\n    render() {\n        let questions = (this.props.quiz.questions) ?\n            this.props.quiz.questions.slice(this.props.pager.index, this.props.pager.index + this.props.pager.size) : [];\n        return (\n            <div id=\"quiz\">\n                <h2 className=\"text-center font-weight-normal\">{this.props.quiz.name}</h2>\n                <hr />\n                {questions.map(q =>\n                    <div key={q.id}>\n                        <div className=\"badge badge-info\">Question {this.props.pager.index + 1} of {this.props.pager.count}.</div>\n                        <h3 className=\"font-weight-normal\">{this.props.pager.index + 1}. <span>{q.name}</span></h3>\n                        <div className=\"row text-left options\">\n                            {\n                                q.options.map(option =>\n                                    <div key={option.id} className=\"col-6\">\n                                        <div className=\"option\">\n                                            <label className=\"font-weight-normal\" htmlFor={option.id}>\n                                                <input id={option.id} checked={option.selected} type=\"checkbox\" onChange={() => this.onAnswer(q, option)} />\n                                                {option.name}\n                                            </label>\n                                        </div>\n                                    </div>\n                                )\n                            }\n                        </div>\n                    </div>\n                )}\n                <hr />\n                <div className=\"text-center\">\n                    {this.props.quiz.config.allowBack && <button id=\"first\" className=\"btn btn-default\" onClick={this.props.move}>First</button>}\n                    {this.props.quiz.config.allowBack && <button id=\"prev\" className=\"btn btn-default\" onClick={this.props.move}>Prev</button>}\n                    <button id=\"next\" className=\"btn btn-primary\" onClick={this.props.move}>Next</button>\n                    <button id=\"last\" className=\"btn btn-default\" onClick={this.props.move}>Last</button>\n                </div>\n            </div >\n        )\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Questions);","import React from 'react';\n\nfunction Result(props) {\n    let questions = props.questions;\n    questions.forEach(q => { q.isCorrect = q.options.every(x => x.selected === x.isAnswer); })\n\n    return (\n        <div className=\"result\">\n            <h2 className=\"text-center font-weight-normal\">Quiz Result</h2>\n            {questions.map((q, index) =>\n                <div key={q.id} className={`mb-2 ${q.isCorrect ? 'bg-success' : 'bg-danger'}`}>\n                    <div className=\"result-question\">\n                        <h5>{index + 1}. {q.name}</h5>\n                        <div className=\"row\">\n                            {\n                                q.options.map(option =>\n                                    <div key={option.id} className=\"col-6\">\n                                        <input id={option.id} type=\"checkbox\" disabled=\"disabled\" checked={option.selected} /> {option.name}\n                                    </div>\n                                )\n                            }\n                        </div>\n                        <div className={`m-1 p-1 text-bold ${q.isCorrect ? 'text-success' : 'text-danger'}`}>Your answer is {q.isCorrect ? 'Correct' : 'Wrong'}.</div>\n                    </div>\n                </div>\n            )}\n            <h4 className=\"alert alert-info text-center\">You may close this window now.</h4>\n        </div>\n    )\n}\n\nexport default Result;","import React, { Component } from 'react';\nimport { ActionTypes } from '../constants/actionTypes';\nimport Questions from './Questions';\nimport Result from './Result';\nimport { connect } from 'react-redux';\n\nconst mapStateToProps = state => { return { ...state.quiz, ...state.mode, ...state.pager } };\n\nconst mapDispatchToProps = dispatch => ({\n    onSubmit: payload => dispatch({ type: ActionTypes.QuizSubmit, payload }),\n    onPagerUpdate: payload => dispatch({ type: ActionTypes.PagerUpdate, payload })\n});\n\nclass Quiz extends Component {\n    move = (e) => {\n        let id = e.target.id;\n        let index = 0;\n        if (id === 'first')\n            index = 0;\n        else if (id === 'prev')\n            index = this.props.pager.index - 1;\n        else if (id === 'next')\n            index = this.props.pager.index + 1;\n        else if (id === 'last')\n            index = this.props.pager.count - 1;\n        else\n            index = parseInt(e.target.id, 10);\n\n        if (index >= 0 && index < this.props.pager.count) {\n            let pager = {\n                index: index,\n                size: 1,\n                count: this.props.pager.count\n            };\n            this.props.onPagerUpdate(pager);\n        }\n    }\n\n    setMode = (e) => this.props.onSubmit(e.target.id);\n\n    renderMode() {\n        if (this.props.mode === 'quiz') {\n            return (<Questions move={this.move} />)\n        } else {\n            return (<Result questions={this.props.quiz.questions || []} />)\n        }\n    }\n\n    render() {\n        return (\n            <div>\n                {this.renderMode()}\n                {(this.props.mode !== 'submit') &&\n                    <div>\n                        <hr />\n                        <button id=\"quiz\" className=\"btn btn-info\" onClick={this.setMode}>Quiz</button>\n                        <button id=\"submit\" className=\"btn btn-primary\" onClick={this.setMode}>Submit Quiz</button >\n                    </div >}\n            </div>\n        )\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Quiz);","import React, { Component } from 'react';\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport Quiz from './components/Quiz';\nimport { connect } from 'react-redux';\nimport { ActionTypes } from './constants/actionTypes';\n\nconst mapStateToProps = state => { return { ...state.quiz } };\n\nconst mapDispatchToProps = dispatch => ({\n  onQuizLoad: payload => dispatch({ type: ActionTypes.QuizLoad, payload }),\n  onPagerUpdate: payload => dispatch({ type: ActionTypes.PagerUpdate, payload })\n});\n\nclass App extends Component {\n  state = {\n    quizId: 'data/javascript.json'\n  };\n\n  pager = {\n    index: 0,\n    size: 1,\n    count: 1\n  }\n\n  componentDidMount() {\n    this.load(this.state.quizId);\n  }\n\n  load(quizId) {\n    let url = quizId || this.props.quizId;\n    fetch(`../${url}`).then(res => res.json()).then(res => {\n      let quiz = res;\n      quiz.questions.forEach(q => {\n        q.options.forEach(o => o.selected = false);\n      });\n      quiz.config = Object.assign(this.props.quiz.config || {}, quiz.config);\n      this.pager.count = quiz.questions.length / this.pager.size;\n      this.props.onQuizLoad(quiz);\n      this.props.onPagerUpdate(this.pager);\n    });\n  }\n\n  onChange = (e) => {\n    this.setState({ quizId: e.target.value });\n    this.load(e.target.value);\n  }\n\n  render() {\n    return (\n      <div className=\"container\">\n        <header className=\"p-2\">\n          <div className=\"row\">\n            <div className=\"col-6\">\n              <h3>Quiz Application</h3>\n            </div>\n          </div>\n        </header>\n        <Quiz quiz={this.state.quiz} quizId={this.state.quizId} mode={this.state.mode} />\n      </div>\n    );\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","\nimport { } from './constants/actionTypes';\n\nconst promiseMiddleware = store => next => action => {\n    // Do Nothing for now.//\n    next(action);\n};\n\nexport { promiseMiddleware }","import {\n    ActionTypes\n} from '../constants/actionTypes';\n\nlet initialQuiz = {\n    quiz: {\n        config: {\n            'allowBack': true,\n            'allowReview': true,\n            'autoMove': false,  // if true, it will move to next question automatically when answered.\n            'duration': 0,  // indicates the time in which quiz needs to be completed. 0 means unlimited.\n            'pageSize': 1,\n            'requiredAll': false,  // indicates if you must answer all the questions before submitting.\n            'richText': false,\n            'shuffleQuestions': false,\n            'shuffleOptions': false,\n            'showClock': false,\n            'showPager': true,\n            'theme': 'none'\n        },\n        questions: []\n    },\n    mode: 'quiz',\n    pager: {\n        index: 0,\n        size: 1,\n        count: 1\n    }\n}\n\nexport default (state = { ...initialQuiz }, action) => {\n    switch (action.type) {\n        case ActionTypes.PagerUpdate:\n            return {\n                ...state, pager: action.payload, mode: 'quiz'\n            }\n        case ActionTypes.QuizLoad:\n            return {\n                ...state, quiz: action.payload\n            }\n        case ActionTypes.QuizSubmit:\n            console.log('quiz.js Submitted.');\n            return {\n                ...state, mode: action.payload\n            }\n        case ActionTypes.QuizAnswer:\n            console.log('quiz.js reducer Quiz Answer called.');\n            return {\n                ...state, quiz: action.payload\n            }\n        default:\n            return state;\n    }\n};\n","import quiz from './reducers/quiz';\nimport { combineReducers } from 'redux';\n\nexport default combineReducers({\n  quiz\n});\n","import { applyMiddleware, createStore } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension/developmentOnly';\nimport { promiseMiddleware } from './middleware';\nimport reducer from './reducer';\n\nconst getMiddleware = () => {\n    if (process.env.NODE_ENV === 'production') {\n        return applyMiddleware(promiseMiddleware);\n    } else {\n        return applyMiddleware(promiseMiddleware)\n    }\n};\n\nexport const store = createStore(reducer, composeWithDevTools(getMiddleware()));","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\nimport { Provider } from 'react-redux';\nimport { store } from './store';\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}